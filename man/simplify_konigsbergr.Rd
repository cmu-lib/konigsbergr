% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/networking.R
\name{simplify_konigsbergr}
\alias{simplify_konigsbergr}
\title{Simplify a Konigsbergr Graph for Network Analysis}
\usage{
simplify_konigsbergr(graph, preserve_bridges = TRUE)
}
\arguments{
\item{graph}{A Konigsbergr graph created from \code{\link[=konigsbergr_graph]{konigsbergr_graph()}}.}

\item{preserve_bridges}{Boolean. Preserve full bridge geometry?}
}
\value{
A simple, undirected \code{\link[igraph:igraph]{igraph}} object.
}
\description{
This function simplifies a Konigsbergr graph by reducing the
graph to a simpler representation where intersections are directly connected
by straight edges.
}
\details{
Raw Konigsbergr graphs contain a huge number of nodes in order to accurately
describe the geometry of curved roads. For many network analyses, however,
road curvature is unimportant compared to the toplogocal layout of
intersections. Simplifying OSM-based road graphs like this can reduce the
size of a graph by up to 90%, greatly speeding many analyses. The additional
nodes needed to accuratley encode complete spatial information can interfere
with some common calculations such as \link[igraph:closeness]{closeness()}, so
simplifying the graph like this can also return more accurate metrics.

Beware that this simplifcation also reduces the data to a simple, undirected
graph, so note that the distinction between two-way and one-way roads will be
discarded. The sum of the total distances of the removed edges are
maintained, however, so the real-world distance in meters of an edge will be
saved in the \code{distance} edge attribute of the new graph.
}
\examples{
\dontrun{
boston_konigsbergr <- konigsberg_graph(boston)

boston_sf <- graph_to_sf(boston_konigsbergr)
plot(boston_sf$edges["geometry"])

simple_boston <- simplify_konigsbergr(boston_konigsbergr)
simple_boston_sf <- graph_to_sf(simple_boston)
plot(simple_boston_sf$edges["geometry"])
}
}
\seealso{
This function relies on the
\link[simplygraph:simplify_topology]{simplify_topology()} function from the
simplygraph package.
}
